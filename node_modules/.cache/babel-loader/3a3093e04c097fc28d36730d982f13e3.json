{"ast":null,"code":"/**\n * react-query\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nconst defaultContext = /*#__PURE__*/React__namespace.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/React__namespace.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nconst useQueryClient = function () {\n  let {\n    context\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const queryClient = React__namespace.useContext(getQueryClientContext(context, React__namespace.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\n\nconst QueryClientProvider = _ref => {\n  let {\n    client,\n    children,\n    context,\n    contextSharing = false\n  } = _ref;\n  React__namespace.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  const Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React__namespace.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React__namespace.createElement(Context.Provider, {\n    value: client\n  }, children));\n};\n\nexports.QueryClientProvider = QueryClientProvider;\nexports.defaultContext = defaultContext;\nexports.useQueryClient = useQueryClient;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWO,MAAMA,cAAc,gBAAGC,gBAAK,CAACC,aAAND,CAC5BE,SAD4BF,CAAvB;AAGP,MAAMG,yBAAyB,gBAAGH,gBAAK,CAACC,aAAND,CAA6B,KAA7BA,CAAlC,C,CAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,qBAAT,CACEC,OADF,EAEEC,cAFF,EAGE;EACA,IAAID,OAAJ,EAAa;IACX,OAAOA,OAAP;EACD;;EACD,IAAIC,cAAc,IAAI,OAAOC,MAAP,KAAkB,WAAxC,EAAqD;IACnD,IAAI,CAACA,MAAM,CAACC,uBAAZ,EAAqC;MACnCD,MAAM,CAACC,uBAAPD,GAAiCR,cAAjCQ;IACD;;IAED,OAAOA,MAAM,CAACC,uBAAd;EACD;;EAED,OAAOT,cAAP;AACD;;AAEM,MAAMU,cAAc,GAAG,YAAsC;EAAA,IAArC;IAAEJ;EAAF,CAAqC,uEAAP,EAAO;EAClE,MAAMK,WAAW,GAAGV,gBAAK,CAACW,UAANX,CAClBI,qBAAqB,CAACC,OAAD,EAAUL,gBAAK,CAACW,UAANX,CAAiBG,yBAAjBH,CAAV,CADHA,CAApB;;EAIA,IAAI,CAACU,WAAL,EAAkB;IAChB,MAAM,IAAIE,KAAJ,CAAU,wDAAV,CAAN;EACD;;EAED,OAAOF,WAAP;AACD,CAVM;;AA4BA,MAAMG,mBAAmB,GAAG,QAKU;EAAA,IALT;IAClCC,MADkC;IAElCC,QAFkC;IAGlCV,OAHkC;IAIlCC,cAAc,GAAG;EAJiB,CAKS;EAC3CN,gBAAK,CAACgB,SAANhB,CAAgB,MAAM;IACpBc,MAAM,CAACG,KAAPH;IACA,OAAO,MAAM;MACXA,MAAM,CAACI,OAAPJ;IADF;EAFF,GAKG,CAACA,MAAD,CALHd;EAOA,MAAMmB,OAAO,GAAGf,qBAAqB,CAACC,OAAD,EAAUC,cAAV,CAArC;EAEA,oBACEN,+BAACG,yBAAD,CAA2BiB,QAA3BpB;IAAoCqB,KAAK,EAAE,CAAChB,OAAD,IAAYC;EAAvD,GACE,4CAACa,OAAD,CAASC,QAATpB;IAAkBqB,KAAK,EAAEP;EAAzB,GAAkCC,QAAlCf,CADFA,CADF;AAKD,CApBM","names":["defaultContext","React","createContext","undefined","QueryClientSharingContext","getQueryClientContext","context","contextSharing","window","ReactQueryClientContext","useQueryClient","queryClient","useContext","Error","QueryClientProvider","client","children","useEffect","mount","unmount","Context","Provider","value"],"sources":["/Users/jrkim/Desktop/Programming/WEB/CodingApple/node_modules/react-query/src/QueryClientProvider.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport { QueryClient } from '@tanstack/query-core'\nimport { ContextOptions } from './types'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nexport const defaultContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(\n  context: React.Context<QueryClient | undefined> | undefined,\n  contextSharing: boolean,\n) {\n  if (context) {\n    return context\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = ({ context }: ContextOptions = {}) => {\n  const queryClient = React.useContext(\n    getQueryClientContext(context, React.useContext(QueryClientSharingContext)),\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\ntype QueryClientProviderPropsBase = {\n  client: QueryClient\n  children?: React.ReactNode\n}\ntype QueryClientProviderPropsWithContext = ContextOptions & {\n  contextSharing?: never\n} & QueryClientProviderPropsBase\ntype QueryClientProviderPropsWithContextSharing = {\n  context?: never\n  contextSharing?: boolean\n} & QueryClientProviderPropsBase\n\nexport type QueryClientProviderProps =\n  | QueryClientProviderPropsWithContext\n  | QueryClientProviderPropsWithContextSharing\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext(context, contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={!context && contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}