{"ast":null,"code":"/**\n * react-query\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nvar index = require('../../query-core/build/esm/index.js');\n\nvar useSyncExternalStore = require('./useSyncExternalStore.js');\n\nvar QueryClientProvider = require('./QueryClientProvider.js');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nfunction useIsFetching(arg1, arg2, arg3) {\n  const [filters, options = {}] = index.parseFilterArgs(arg1, arg2, arg3);\n  const queryClient = QueryClientProvider.useQueryClient({\n    context: options.context\n  });\n  const queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore.useSyncExternalStore(React__namespace.useCallback(onStoreChange => queryCache.subscribe(index.notifyManager.batchCalls(onStoreChange)), [queryCache]), () => queryClient.isFetching(filters), () => queryClient.isFetching(filters));\n}\n\nexports.useIsFetching = useIsFetching;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBO,SAASA,aAAT,CACLC,IADK,EAELC,IAFK,EAGLC,IAHK,EAIG;EACR,MAAM,CAACC,OAAD,EAAUC,OAAO,GAAG,EAApB,IAA0BC,sBAAgBL,IAAhBK,EAAsBJ,IAAtBI,EAA4BH,IAA5BG,CAAhC;EACA,MAAMC,WAAW,GAAGC,mCAAe;IAAEC,OAAO,EAAEJ,OAAO,CAACI;EAAnB,CAAfD,CAApB;EACA,MAAME,UAAU,GAAGH,WAAW,CAACI,aAAZJ,EAAnB;EAEA,OAAOK,0CACLC,gBAAK,CAACC,WAAND,CACGE,aAAD,IACEL,UAAU,CAACM,SAAXN,CAAqBO,oBAAcC,UAAdD,CAAyBF,aAAzBE,CAArBP,CAFJG,EAGE,CAACH,UAAD,CAHFG,CADKD,EAML,MAAML,WAAW,CAACY,UAAZZ,CAAuBH,OAAvBG,CANDK,EAOL,MAAML,WAAW,CAACY,UAAZZ,CAAuBH,OAAvBG,CAPDK,CAAP;AASD","names":["useIsFetching","arg1","arg2","arg3","filters","options","parseFilterArgs","queryClient","useQueryClient","context","queryCache","getQueryCache","useSyncExternalStore","React","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","isFetching"],"sources":["/Users/jrkim/Desktop/Programming/WEB/CodingApple/node_modules/react-query/src/useIsFetching.ts"],"sourcesContent":["import * as React from 'react'\nimport {\n  QueryKey,\n  notifyManager,\n  parseFilterArgs,\n  QueryFilters,\n} from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"script"}